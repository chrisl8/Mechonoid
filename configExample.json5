{
  robotName: "Dalek One",
  webServerPort: 80,
  cloudServer: {
    exists: false,
    address: "https://robots.example.com/",
    password: "superSecret1234",
  },
  hardwareControllers: {
    roboClawOne: {
      type: "RoboClaw",
      logName: "RoboClaw",
      stringLocation: "ID_MODEL",
      uniqueDeviceString: "USB_Roboclaw_2x7A",
      minVoltage: 11.7,
      maxCurrent: 3.5,
    },
    maestroBoardOne: {
      type: "Maestro",
      logName: "Maestro Board",
      uniqueDeviceString: "Pololu_Mini_Maestro_18-Channel_USB_Servo_Controller",
      stringLocation: "ID_MODEL",
    },
  },
  motors: {
    dualSpeed: {
      hardwareController: "roboClawOne",
      type: "speed",
      channel: "dual",
      off: 0,
      maximum: 127,
      minimum: -127,
      lastValue: 0,
      mountedBackwards: true,
    },
    individualSpeedMotorRight: {
      hardwareController: "roboClawOne",
      type: "speed",
      channel: 1,
      off: 0,
      maximum: 127,
      minimum: -127,
      lastValue: 0,
      mountedBackwards: true,
    },
    individualSpeedMotorLeft: {
      hardwareController: "roboClawOne",
      type: "speed",
      channel: 2,
      off: 0,
      maximum: 127,
      minimum: -127,
      lastValue: 0,
      mountedBackwards: true,
    },
    motivator: {
      hardwareController: "roboClawOne",
      type: "differentialSpeed",
      channel: "dual",
      off: 0,
      maximum: 127,
      minimum: -127,
      lastValue: 0,
      reversed: true,
      mountedBackwards: true,
      maxLinearSpeed: 0.5,
      maxAngularSpeed: 0.75,
      baseWidth: 0.66,
      countsPerRevolution: 9600,
      wheelRadius: 0.1,
    },
  },
  servos: {
    eyeStalk: {
      hardwareController: "maestroBoardOne",
      channel: 0,
      type: 180,
      minimum: 2000,
      maximum: 10000,
      center: 5800,
      off: 0,
      lastValue: 0,
      vertical: true,
    },
    leftArmVertical: {
      hardwareController: "maestroBoardOne",
      channel: 3,
      type: 180,
      minimum: 10000,
      maximum: 5000,
      center: 5800,
      off: 0,
      lastValue: 0,
      vertical: true,
    },
    leftArmHorizontal: {
      hardwareController: "maestroBoardOne",
      channel: 4,
      type: 180,
      minimum: 2000,
      maximum: 10000,
      center: 5800,
      off: 0,
      lastValue: 0,
    },
    rightArmVertical: {
      hardwareController: "maestroBoardOne",
      channel: 5,
      type: 180,
      minimum: 2000,
      maximum: 7000,
      center: 5800,
      off: 0,
      lastValue: 0,
      vertical: true,
    },
    rightArmHorizontal: {
      hardwareController: "maestroBoardOne",
      channel: 6,
      type: 180,
      minimum: 2000,
      maximum: 10000,
      center: 5800,
      off: 0,
      lastValue: 0,
    },
    head: {
      trulyContinuous: true,
      hardwareController: "maestroBoardOne",
      channel: 1,
      type: 360,
      minimum: 3200,
      maximum: 8000,
      center: 5800,
      off: 0,
      switchClosed: {
        front: false,
        left: false,
        back: false,
        right: false,
      },
      lastValue: 0,
      locationPoints: null,
      stopOnArrival: null,
    },
    shoulders: {
      hardwareController: "maestroBoardOne",
      channel: 2,
      type: 360,
      minimum: 3200,
      maximum: 8000,
      center: 5800,
      off: 0,
      switchClosed: {
        left: false,
        center: false,
        right: false,
      },
      lastValue: 0,
      centerOffset: null,
      stopOnArrival: null,
    },
  },
  gpioPins: [
    {
      pin: 26,
      location: "shoulders",
      entry: "left",
      operations: ["stopIfLessThanZero", "rectifyCenterOffset"],
    },
    {
      pin: 19,
      location: "shoulders",
      entry: "center",
      operations: ["setCenterOffset"],
    },
    {
      pin: 13,
      location: "shoulders",
      entry: "right",
      operations: ["stopIfGreaterThanZero", "rectifyCenterOffset"],
    },
    {
      pin: 12,
      location: "head",
      entry: "front",
      operations: ["setPositionInteger"],
    },
    {
      pin: 16,
      location: "head",
      entry: "right",
      operations: ["setPositionInteger"],
    },
    {
      pin: 20,
      location: "head",
      entry: "back",
      operations: ["setPositionInteger"],
    },
    {
      pin: 21,
      location: "head",
      entry: "left",
      operations: ["setPositionInteger"],
    },
  ],
  joysticks: [
    {
      // run jstest and put the name found after "Joystick" here:
      name: "Xbox Wireless Controller", // From jstest output
      deadZone: 150,
      // 1500
      sensitivity: 100,
      // 350
      axisInputs: {
        "0": {
          outputType: "twist",
          motorName: "motivator",
          angularOrLinearSpeed: "angularSpeed",
          inputMax: 32767,
        },
        "1": {
          outputType: "twist",
          motorName: "motivator",
          angularOrLinearSpeed: "linearSpeed",
          inputMax: 32767,
        },
      },
    },
    {
      // run jstest and put the name found after "Joystick" here:
      name: "Wireless Steam Controller", // From jstest output
      deadZone: 150, // 1500
      sensitivity: 100, // 350
      axisInputs: {
        "0": {
          outputType: "twist",
          motorName: "motivator",
          angularOrLinearSpeed: "angularSpeed",
          inputMax: 32767,
        },
        "1": {
          outputType: "twist",
          motorName: "motivator",
          angularOrLinearSpeed: "linearSpeed",
          inputMax: 32767,
        },
        "2": {
          outputType: "servo",
          motorName: "rightArmHorizontal",
          inputMax: 32767,
          onlyActiveWhenButtonPressed: 1,
          allowZeroWhileActive: false,
        },
        "3": {
          outputType: "servo",
          motorName: "rightArmVertical",
          inputMax: 32767,
          onlyActiveWhenButtonPressed: 1,
          allowZeroWhileActive: false,
        },
        "4": {
          outputType: "servo",
          motorName: "leftArmHorizontal",
          inputMax: 32767,
          onlyActiveWhenButtonPressed: 0,
          allowZeroWhileActive: false,
        },
        "5": {
          outputType: "servo",
          motorName: "leftArmVertical",
          inputMax: 32767,
          onlyActiveWhenButtonPressed: 0,
          allowZeroWhileActive: false,
        },
      },
      // Each button is an object with a list of the states that you want to truck, usually 0 and 1.
      buttonInputs: {
        "1": {
          // Each state contains an array of objects, each listing a function to call and any arguments to pass to it.
          // The functions should all be in the file node/joystickButtonFunctions.js
          "0": [
            {
              function: "stopServo",
              arguments: ["rightArmHorizontal"],
            },
          ],
        },
      },
    },
  ],
}
